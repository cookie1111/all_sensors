<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Radical.Windows.Presentation</name>
    </assembly>
    <members>
        <member name="T:Topics.Radical.Windows.Presentation.AbstractMementoViewModel">
            <summary>
            A base abstract ViewModel with builtin support for validation, error notification and memento.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IViewModel">
            <summary>
            Defines the base contract that a Topics.Presentation
            ViewModel must respect.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IViewModel.View">
            <summary>
            Gets or sets the view. The view property is intended only for
            infrastructural purpose. It is required to hold the one-to-one
            relation beteewn the view and the view model.
            </summary>
            <value>
            The view.
            </value>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.SkipPropertyValidation(System.String)">
            <summary>
            Determines if property validation should be skipped for the given property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.GetValidationService">
            <summary>
            Gets the validation service, this method is called once the first time
            the validation service is accessed, inheritors should override this method
            in order to provide an <see cref="T:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService"/> implementation.
            </summary>
            <returns>The validation service to use to validate this view model.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.AbstractMementoViewModel"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.#ctor(Topics.Radical.ComponentModel.ChangeTracking.ChangeTrackingRegistration)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.AbstractMementoViewModel"/> class.
            </summary>
            <param name="registration">The registration.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.ValidateProperty(System.String)">
            <summary>
            Validates the given property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>
            The first validation error, if any; Otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.ValidateProperty(System.String,Topics.Radical.Windows.Presentation.ComponentModel.ValidationBehavior)">
            <summary>
            Validates the given property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="behavior">The behavior.</param>
            <returns>
            The first validation error, if any; Otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.Validate">
            <summary>
            Validates this instance.
            </summary>
            <returns><c>True</c> if this instance is valid; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.Validate(Topics.Radical.Windows.Presentation.ComponentModel.ValidationBehavior)">
            <summary>
            Validates this instance.
            </summary>
            <param name="behavior">The behavior.</param>
            <returns>
              <c>True</c> if this instance is valid; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.Validate(System.String,Topics.Radical.Windows.Presentation.ComponentModel.ValidationBehavior)">
            <summary>
            Validates this instance.
            </summary>
            <param name="ruleSet">The rule set.</param>
            <param name="behavior">The behavior.</param>
            <returns>
              <c>True</c> if this instance is valid; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.OnValidated">
            <summary>
            Raises the Validated event.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.TriggerValidation">
            <summary>
            Triggers the validation.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.OnMementoChanged(Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService,Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService)">
            <summary>
            Called when the <see cref="T:Topics.Radical.ComponentModel.ChangeTracking.IChangeTrackingService"/> changes.
            </summary>
            <param name="newMemento">The new memento service.</param>
            <param name="oldMemento">The old memmento service.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.OnAcceptingChanges(System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when the changes are ready to be accepted.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.OnRejectingChanges(System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when the changes are ready to be rejected.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.OnChangesAccepted">
            <summary>
            Called when the changes have been accepted.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.OnChangesRejected">
            <summary>
            Called when have been rejected.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.MoveFocusTo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Moves the focus to.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.MoveFocusTo(System.String)">
            <summary>
            Moves the focus to.
            </summary>
            <param name="focusedElementKey">The focused element key.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.Topics#Radical#Windows#Presentation#ComponentModel#IViewModel#View">
            <summary>
            Gets or sets the view. The view property is intended only for
            infrastructural purpose. It is required to hold the one-to-one
            relation beteewn the view and the view model.
            </summary>
            <value>
            The view.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.IsValidationEnabled">
            <summary>
            Gets a value indication if validation is enabled or not.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.ValidationService">
            <summary>
            Gets the validation service.
            </summary>
            <value>The validation service.</value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
            <remarks>Used only in order to satisfy IDataErrorInfo interface implementation, the default implementation always returns null.</remarks>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.Item(System.String)">
            <summary>
            Gets the error message, if any, for the property with the given name.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.ValidationErrors">
            <summary>
            Gets the validation errors if any.
            </summary>
            <value>The validation errors.</value>
        </member>
        <member name="E:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.Validated">
            <summary>
            Occurs when the validation process terminates.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.IsTriggeringValidation">
            <summary>
            Gets or sets a value indicating whether this instance is triggering validation.
            </summary>
            <value>
            	<c>true</c> if this instance is triggering validation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.FocusedElementKey">
            <summary>
            Gets or sets the focused element key.
            </summary>
            <value>
            The focused element key.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.RunValidationOnPropertyChanged">
            <summary>
            Determines if each time a property changes the validation process should be run. The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractMementoViewModel.IsResettingValidation">
            <summary>
            <c>True</c> if the current ValidationService is resetting the validation status; Otherwise <c>false</c>.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Behaviors.Focus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.Behaviors.Focus.ControlledByProperty">
            <summary>
            The controlled by property
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Behaviors.Focus.OnAttached">
            <summary>
            Called when [attached].
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Behaviors.Focus.OnDetaching">
            <summary>
            Called when [detaching].
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Behaviors.Focus.ControlledBy">
            <summary>
            Gets or sets the controlled by.
            </summary>
            <value>
            The controlled by.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Behaviors.Focus.UsingKey">
            <summary>
            Gets or sets the using key.
            </summary>
            <value>
            The using key.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Behaviors.FrameworkElementLifecycleNotificationsBehavior">
            <summary>
            Wires the FrameworkElement lifecycle to a view model that requires lifecycle notifications.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Behaviors.FrameworkElementLifecycleNotificationsBehavior.#ctor(Topics.Radical.ComponentModel.Messaging.IMessageBroker,Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Behaviors.FrameworkElementLifecycleNotificationsBehavior"/> class.
            </summary>
            <param name="broker">The broker.</param>
            <param name="conventions">The conventions handler.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Behaviors.FrameworkElementLifecycleNotificationsBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Behaviors.FrameworkElementLifecycleNotificationsBehavior.OnDetaching">
            <summary>
            Called when the behavior is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Behaviors.DependencyObjectCloseHandlerBehavior">
            <summary>
            Special behavior to handle view close requests.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Behaviors.DependencyObjectCloseHandlerBehavior.#ctor(Topics.Radical.ComponentModel.Messaging.IMessageBroker,Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Behaviors.DependencyObjectCloseHandlerBehavior"/> class.
            </summary>
            <param name="broker">The broker.</param>
            <param name="conventions">The conventions.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Behaviors.DependencyObjectCloseHandlerBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Behaviors.DependencyObjectCloseHandlerBehavior.OnDetaching">
            <summary>
            Called when the behavior is being detached from its AssociatedObject,
            but before it has actually occurred.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Behaviors.WindowLifecycleNotificationsBehavior">
            <summary>
            Wires the window lifecycle to a view model that requires lifecycle notifications.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Behaviors.WindowLifecycleNotificationsBehavior.#ctor(Topics.Radical.ComponentModel.Messaging.IMessageBroker,Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Behaviors.WindowLifecycleNotificationsBehavior"/> class.
            </summary>
            <param name="broker">The broker.</param>
            <param name="conventions">The conventions handler.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Behaviors.WindowLifecycleNotificationsBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Behaviors.WindowLifecycleNotificationsBehavior.OnDetaching">
            <summary>
            Called when the behavior is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Boot.SplashScreenConfiguration">
            <summary>
            The configuration of the SplashScreen.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.SplashScreenConfiguration.#ctor">
            <summary>
            SplashScreenConfiguration default constructor.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.SplashScreenConfiguration.SizeToContent">
            <summary>
            Determines the way the splash screen hosting window is dimensioned, the default value is <c>WidthAndHeight</c>.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.SplashScreenConfiguration.WindowStartupLocation">
            <summary>
            The splash screen startup location, the default value is <c>CenterScreen</c>.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.SplashScreenConfiguration.WindowStyle">
            <summary>
            The splash screen window style, the default valkue is <c>None</c>.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.SplashScreenConfiguration.StartupAsyncWork">
            <summary>
            Defines the work that shopuld be executed asynchronously while the splash screen is running.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.SplashScreenConfiguration.Height">
            <summary>
            Defines the Height of the splash screen window if the SizeToContent value is Manual or Widht; otherwise is ignored.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.SplashScreenConfiguration.Width">
            <summary>
            Defines the Width of the splash screen window if the SizeToContent value is Manual or Height; otherwise is ignored.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.SplashScreenConfiguration.MinimumDelay">
            <summary>
            Represents the minimum time, in milliseconds, the splash screen will be shown.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.SplashScreenConfiguration.SplashScreenViewType">
            <summary>
            Defines the default view that Radical use to host the splash screen content.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.SplashScreenConfiguration.MinWidth">
            <summary>
            The Minimum Width of the splash screen window. The default value is 585.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.SplashScreenConfiguration.MinHeight">
            <summary>
            The Minimum Height of the splash screen window. The default value is 335.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper">
            <summary>
            The application bootstrapper. Provides a way to dramatically simplifly the
            application boot process.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.UsingAsShell``1">
            <summary>
            Defines the type to use as main/shell window.
            </summary>
            <typeparam name="TShellType">The shell type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.UsingAsShell(System.Type)">
            <summary>
            Defines the type to use as main/shell window.
            </summary>
            <param name="shellViewType">The shell type.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.EnableSplashScreen(Topics.Radical.Windows.Presentation.Boot.SplashScreenConfiguration)">
            <summary>
            Enables splash screen support.
            </summary>
            <param name="config">The splash screen configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.DisableAutoBoot">
            <summary>
            Disables the auto boot.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.CreateServiceProvider">
            <summary>
            Creates the IoC service provider.
            </summary>
            <returns>The IoC service provider.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.OnCatalogDefinition(System.Func{System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartCatalog}})">
            <summary>
            Called in order to inject custom catalogs.
            </summary>
            <param name="catalogDefinitionHandler">The catalog definition handler.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.CreateAggregateCatalog(System.IServiceProvider)">
            <summary>
            Creates the aggregate catalog.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <returns>
            The aggregate catalog.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.CreateCompositionContainer(System.ComponentModel.Composition.Hosting.AggregateCatalog,System.IServiceProvider)">
            <summary>
            Creates the composition container.
            </summary>
            <param name="catalog">The catalog.</param>
            <param name="serviceProvider">The service provider.</param>
            <returns>
            The composition container.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.SetupUICompositionEngine(System.IServiceProvider)">
            <summary>
            Setups the UI composition engine.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.OnCompositionContainerComposed(System.ComponentModel.Composition.Hosting.CompositionContainer,System.IServiceProvider)">
            <summary>
            Called when the composition container has been composed.
            </summary>
            <param name="container">The container.</param>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.OnBeforeInstall(System.Action{Topics.Radical.Windows.Presentation.Boot.BootstrapConventions})">
            <summary>
            Called before the install and boot process begins, right after the service provider creation.
            </summary>
            <param name="onBeforeInstall">The on before install.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.OnServiceProviderCreated(System.Action{System.IServiceProvider})">
            <summary>
            Called when the service provider is created.
            </summary>
            <param name="onServiceProviderCreated">The on service provider created.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.UsingAsCurrentCulture(System.Func{System.Globalization.CultureInfo})">
            <summary>
            Usings as current culture.
            </summary>
            <param name="currentCultureHandler">The current culture handler.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.UsingAsCurrentUICulture(System.Func{System.Globalization.CultureInfo})">
            <summary>
            Usings as current UI culture.
            </summary>
            <param name="currentUICultureHandler">The current UI culture handler.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.InitializeCurrentPrincipal">
            <summary>
            Initializes the current principal.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.InitializeCultures">
            <summary>
            Initializes the cultures.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.HandleSingletonApplicationStartup(Topics.Radical.Windows.Presentation.Boot.SingletonApplicationStartupArgs)">
            <summary>
            Handles the singleton application scope.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.OnSingletonApplicationStartup(System.Action{Topics.Radical.Windows.Presentation.Boot.SingletonApplicationStartupArgs})">
            <summary>
            Called when a singleton application startup.
            </summary>
            <param name="onSingletonApplicationStartup">The singleton application startup handler.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.OnBoot(System.IServiceProvider)">
            <summary>
            Called in order to execute the boot process.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.Boot">
            <summary>
            Boots this instance.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.Shutdown">
            <summary>
            Shutdowns this application.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.ResolveAll``1">
            <summary>
            Called to ask to the concrete container to resolve all the registered components of type T.
            </summary>
            <typeparam name="T">The type to resolve.</typeparam>
            <returns>A list of resolved types.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.OnBootCompleted(System.IServiceProvider)">
            <summary>
            Called when the boot process has been completed.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.OnShutdown(Topics.Radical.Windows.Presentation.Boot.ApplicationShutdownArgs)">
            <summary>
            Called when the application shutdowns.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.RegisterAsSingleton(System.String)">
            <summary>
            Registers this application as singleton.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.RegisterAsSingleton(System.String,Topics.Radical.Windows.Presentation.Boot.SingletonApplicationScope)">
            <summary>
            Registers this application as singleton.
            </summary>
            <param name="key">The key.</param>
            <param name="scope">The scope.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.OverrideShutdownMode(System.Windows.ShutdownMode)">
            <summary>
            Overrides the shutdown mode.
            </summary>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.OnBoot(System.Action{System.IServiceProvider})">
            <summary>
            Called when the application is booting.
            </summary>
            <param name="bootHandler">The boot handler.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.OnUnhandledException(System.Exception)">
            <summary>
            Called when an unhandled exception occurs.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.OnUnhandledException(System.Action{System.Exception})">
            <summary>
            Allows to inject an handler for unhandled exception(s).
            </summary>
            <param name="unhandledExceptionHandler">The unhandled exception handler.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.OnBootCompleted(System.Action{System.IServiceProvider})">
            <summary>
            Called when the boot process is completed.
            </summary>
            <param name="bootCompletedHandler">The boot completed handler.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.OnShutdown(System.Action{Topics.Radical.Windows.Presentation.Boot.ApplicationShutdownArgs})">
            <summary>
            Called when the application is shuting down.
            </summary>
            <param name="shutdownHandler">The shutdown handler.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.-or- null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.DefineCatalogs">
            <summary>
            Gets or sets the on create aggregate catalog func.
            </summary>
            <value>
            The on create aggregate catalog.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.IsSessionEnding">
            <summary>
            Gets a value indicating whether the operating system session is ending.
            </summary>
            <value>
            	<c>true</c> if the operating system session is ending; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.ApplicationBootstrapper.IsShuttingDown">
            <summary>
            Gets a value indicating whether this application is shutting down.
            </summary>
            <value>
            	<c>true</c> if this application is shutting down; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Boot.ApplicationShutdownArgs">
            <summary>
            The application shutdown arguments.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.ApplicationShutdownArgs.IsBootCompleted">
            <summary>
            Gets a value indicating whether this application boot is completed.
            </summary>
            <value>
            <c>true</c> if this instance is boot completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.ApplicationShutdownArgs.Reason">
            <summary>
            Gets the application shutdown reason.
            </summary>
            <value>
            The application shutdown reason.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Boot.ApplicationShutdownReason">
            <summary>
            Determines the reason for application shutdown.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.Boot.ApplicationShutdownReason.UserRequest">
            <summary>
            The application has been shutdown using the Radical canonical behaviors.
            In this case the shutdown process can be canceled.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.Boot.ApplicationShutdownReason.MultipleInstanceNotAllowed">
            <summary>
            The application is shutting down because another 
            instance is already running and the application 
            is marked as singleton.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.Boot.ApplicationShutdownReason.SessionEnding">
            <summary>
            The application is shutting down because the operating system session is ending.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.Boot.ApplicationShutdownReason.ApplicationRequest">
            <summary>
            The application has been shut down using the App.Current.Shutdown() method.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions"/> class.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.DefaultIsConcreteType">
            <summary>
            Default: Gets or sets the type of the is concrete.
            </summary>
            <value>
            The type of the is concrete.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.IsConcreteType">
            <summary>
            Gets or sets the type of the is concrete.
            </summary>
            <value>
            The type of the is concrete.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.DefaultIsService">
            <summary>
            Default: Gets or sets the is service.
            </summary>
            <value>
            The is service.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.IsService">
            <summary>
            Gets or sets the is service.
            </summary>
            <value>
            The is service.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.DefaultSelectServiceContracts">
            <summary>
            Default: Gets or sets the select service contracts.
            </summary>
            <value>
            The select service contracts.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.SelectServiceContracts">
            <summary>
            Gets or sets the select service contracts.
            </summary>
            <value>
            The select service contracts.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.DefaultIsMessageHandler">
            <summary>
            Default: Gets or sets the is message handler.
            </summary>
            <value>
            The is message handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.IsMessageHandler">
            <summary>
            Gets or sets the is message handler.
            </summary>
            <value>
            The is message handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.DefaultSelectMessageHandlerContracts">
            <summary>
            Default: Gets or sets the select message handler contracts.
            </summary>
            <value>
            The select message handler contracts.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.SelectMessageHandlerContracts">
            <summary>
            Gets or sets the select message handler contracts.
            </summary>
            <value>
            The select message handler contracts.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.DefaultIsView">
            <summary>
            Default: Gets or sets the is view.
            </summary>
            <value>
            The is view.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.IsView">
            <summary>
            Gets or sets the is view.
            </summary>
            <value>
            The is view.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.DefaultIsViewModel">
            <summary>
            Default: Gets or sets the is view model.
            </summary>
            <value>
            The is view model.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.IsViewModel">
            <summary>
            Gets or sets the is view model.
            </summary>
            <value>
            The is view model.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.DefaultIsShellView">
            <summary>
            Default: Gets or sets the is shell view.
            </summary>
            <value>
            The is shell view.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.IsShellView">
            <summary>
            Gets or sets the is shell view.
            </summary>
            <value>
            The is shell view.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.DefaultIsShellViewModel">
            <summary>
            Default: Gets or sets the is shell view model.
            </summary>
            <value>
            The is shell view model.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.IsShellViewModel">
            <summary>
            Gets or sets the is shell view model.
            </summary>
            <value>
            The is shell view model.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.DefaultSelectViewContracts">
            <summary>
            Default: Gets or sets the select view contracts.
            </summary>
            <value>
            The select view contracts.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.SelectViewContracts">
            <summary>
            Gets or sets the select view contracts.
            </summary>
            <value>
            The select view contracts.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.DefaultSelectViewModelContracts">
            <summary>
            Default: Gets or sets the select view model contracts.
            </summary>
            <value>
            The select view model contracts.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.SelectViewModelContracts">
            <summary>
            Gets or sets the select view model contracts.
            </summary>
            <value>
            The select view model contracts.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.DefaultGetInterestedRegionNameIfAny">
            <summary>
            Default: Gets or sets the get interested region name if any.
            </summary>
            <value>
            The get interested region name if any.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.GetInterestedRegionNameIfAny">
            <summary>
            Gets or sets the get interested region name if any.
            </summary>
            <value>
            The get interested region name if any.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.DefaultIsExcluded">
            <summary>
            Default: Gets or sets the is excluded.
            </summary>
            <value>
            The is excluded.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.IsExcluded">
            <summary>
            Gets or sets the is excluded.
            </summary>
            <value>
            The is excluded.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.DefaultAssemblyFileScanPatterns">
            <summary>
            Default: Gets or sets the assembly file scan patterns.
            </summary>
            <value>
            The assembly file scan patterns.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.AssemblyFileScanPatterns">
            <summary>
            Gets or sets the assembly file scan patterns.
            </summary>
            <value>
            The assembly file scan patterns.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.DefaultIncludeAssemblyInContainerScan">
            <summary>
            Default: Gets or sets the include assembly in container scan.
            </summary>
            <value>
            The include assembly in container scan.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.IncludeAssemblyInContainerScan">
            <summary>
            Gets or sets the include assembly in container scan.
            </summary>
            <value>
            The include assembly in container scan.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.DefaultIgnorePropertyInjection">
            <summary>
            Default: Gets or sets the predicate that determines if a property is injectable or not.
            </summary>
            <value>
            The injectable properties predicate.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.IgnorePropertyInjection">
            <summary>
            Gets or sets the predicate that determines if a property is injectable or not.
            </summary>
            <value>
            The injectable properties predicate.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.DefaultIgnoreViewPropertyInjection">
            <summary>
            Default: Gets or sets the predicate that determines if a property of a View is injectable or not.
            </summary>
            <value>
            The injectable properties predicate.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.IgnoreViewPropertyInjection">
            <summary>
            Gets or sets the predicate that determines if a property of a View is injectable or not.
            </summary>
            <value>
            The injectable properties predicate.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.DefaultIgnoreViewModelPropertyInjection">
            <summary>
            Default: Gets or sets the predicate that determines if a property of a ViewModel is injectable or not.
            </summary>
            <value>
            The injectable properties predicate.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.BootstrapConventions.IgnoreViewModelPropertyInjection">
            <summary>
            Gets or sets the predicate that determines if a property of a ViewModel is injectable or not.
            </summary>
            <value>
            The injectable properties predicate.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Boot.IExpectShutdownCallback">
            <summary>
            Allows a third party component to be notified when the
            application lifecycle state changes.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.IExpectShutdownCallback.OnShutdown(Topics.Radical.Windows.Presentation.Boot.ApplicationShutdownReason)">
            <summary>
            Called when the application shuts down.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Boot.DisableAutomaticRegistrationAttribute">
            <summary>
            Instructs the automatic registration process to ignore
            a type marked with this attribue.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Boot.IExpectBootCallback">
            <summary>
            Allows a third party component to be notified when the
            application lifecycle state changes.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.IExpectBootCallback.OnBootCompleted">
            <summary>
            Called when application boot process is completed.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Boot.SingletonApplicationScope">
            <summary>
            Determins the scope of a singleton application.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.Boot.SingletonApplicationScope.NotSupported">
            <summary>
            Singleton application is not supported.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.Boot.SingletonApplicationScope.Global">
            <summary>
            The application is required to be singleton across sessions.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.Boot.SingletonApplicationScope.Local">
            <summary>
            The application is required to be singleton only for the current session.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Boot.SingletonApplicationStartupArgs">
            <summary>
            Arguments to handle the application startup when singleton mode is set up.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Boot.SingletonApplicationStartupArgs.#ctor(Topics.Radical.Windows.Presentation.Boot.SingletonApplicationScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Boot.SingletonApplicationStartupArgs"/> class.
            </summary>
            <param name="scope">The scope.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.SingletonApplicationStartupArgs.Scope">
            <summary>
            Gets the scope.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Boot.SingletonApplicationStartupArgs.AllowStartup">
            <summary>
            Gets or sets a value indicating whether the startup is allowed.
            </summary>
            <value>
              <c>true</c> if the startup is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IReleaseComponents">
            <summary>
            Manage the release process of a component.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IReleaseComponents.Release(System.Object)">
            <summary>
            Releases the given component.
            </summary>
            <param name="component">The component to release.</param>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IgnorePropertyInjectionAttribue">
            <summary>
            Applied to properties prevents the IoC container to inject/intercept properties.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.ViewManualReleaseAttribute">
            <summary>
            When attached to a View prevents the View and the ViewModel associated to be automatically disposed.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.NotifyActivatedAttribute">
            <summary>
            Applied to a ViewModel issues automatically a ViewModelActivated message.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.NotifyClosedAttribute">
            <summary>
            Applied to a ViewModel issues automatically a ViewModelClosed message.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.NotifyShownAttribute">
            <summary>
            Applied to a ViewModel issues automatically a ViewModelShown message.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler">
            <summary>
            Handles Presentation conventions.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.ResolveViewModelType">
            <summary>
            Gets or sets the view model type resolver that can resolve the view model type given the view type.
            </summary>
            <value>
            The view model type resolver.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultResolveViewModelType">
            <summary>
            Default: Gets or sets the view model type resolver that can resolve the view model type given the view type.
            </summary>
            <value>
            The view model type resolver.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.ResolveViewType">
            <summary>
            Gets or sets the view type resolver that can resolve the view type given the view model type.
            </summary>
            <value>
            The view type resolver.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultResolveViewType">
            <summary>
            Default: Gets or sets the view type resolver that can resolve the view type given the view model type.
            </summary>
            <value>
            The view type resolver.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.ViewReleaseHandler">
            <summary>
            Gets or sets the view release handler that is responsible to release views and view models.
            </summary>
            <value>
            The view release handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultViewReleaseHandler">
            <summary>
            Default: Gets or sets the view release handler that is responsible to release views and view models.
            </summary>
            <value>
            The view release handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.ShouldUnregisterRegionManagerOfView">
            <summary>
            Gets or sets the handler that determines if a region manager for the given view should be un-registered, the default behavior is that the region manager should be realsed if the view is not a singleton view.
            </summary>
            <value>
            The un-register region manager handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultShouldUnregisterRegionManagerOfView">
            <summary>
            Default: Gets or sets the handler that determines if a region manager for the given view should be un-registered, the default behavior is that the region manager should be realsed if the view is not a singleton view.
            </summary>
            <value>
            The un-register region manager handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.ShouldReleaseView">
            <summary>
            Gets or sets the handler that determines if a view should be relased, the default behavior is that the view is released if not a singleton view.
            </summary>
            <value>
            The view release handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultShouldReleaseView">
            <summary>
            Default: Gets or sets the handler that determines if a view should be relased, the default behavior is that the view is released if not a singleton view.
            </summary>
            <value>
            The view release handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.ShouldUnsubscribeViewModelOnRelease">
            <summary>
            Gets or sets the handler that determines if a view model should be automatically unsubscribed from all the subscriptions when its view is relased, the default behavior is that the view model is unsubscribed if the view is not a singleton view.
            </summary>
            <value>
            The unsubscribe handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultShouldUnsubscribeViewModelOnRelease">
            <summary>
            Default: Gets or sets the handler that determines if a view model should be automatically unsubscribed from all the subscriptions when its view is relased, the default behavior is that the view model is unsubscribed if the view is not a singleton view.
            </summary>
            <value>
            The unsubscribe handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.FindHostingWindowOf">
            <summary>
            Gets or sets the ViewModel -> window finder that given a ViewModel finds the root Window that hosts that ViewModel.
            </summary>
            <value>
            The window finder.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultFindHostingWindowOf">
            <summary>
            Default: Gets or sets the ViewModel -> window finder that given a ViewModel finds the root Window that hosts that ViewModel.
            </summary>
            <value>
            The window finder.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.FindWindowOf">
            <summary>
            Gets or sets the View -> window finder, that given a View finds the root hosting Window for the given View.
            </summary>
            <value>
            The find window of.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultFindWindowOf">
            <summary>
            Default: Gets or sets the View -> window finder, that given a View finds the root hosting Window for the given View.
            </summary>
            <value>
            The find window of.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.ViewHasDataContext">
            <summary>
            Gets or sets the logic that determines if view has data context.
            </summary>
            <value>
            The logic that determines if view has data context.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultViewHasDataContext">
            <summary>
            Default: Gets or sets the logic that determines if view has data context.
            </summary>
            <value>
            The logic that determines if view has data context.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.ShouldNotifyViewModelLoaded">
            <summary>
            Gets or sets the logic that determines if ViewModel should notify the loaded message.
            </summary>
            <value>
            The logic that determines if ViewModel should notify the loaded message.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultShouldNotifyViewModelLoaded">
            <summary>
            Default: Gets or sets the logic that determines if ViewModel should notify the loaded message.
            </summary>
            <value>
            The logic that determines if ViewModel should notify the loaded message.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.ShouldNotifyViewLoaded">
            <summary>
            Gets or sets the logic that determines if View should notify the loaded message.
            </summary>
            <value>
            The logic that determines if View should notify the loaded message.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultShouldNotifyViewLoaded">
            <summary>
            Default: Gets or sets the logic that determines if View should notify the loaded message.
            </summary>
            <value>
            The logic that determines if View should notify the loaded message.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.SetViewDataContext">
            <summary>
            Gets or sets the logic that sets the view data context.
            </summary>
            <value>
            The logic that sets the view data context.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultSetViewDataContext">
            <summary>
            Default: Gets or sets the logic that sets the view data context.
            </summary>
            <value>
            The logic that sets the view data context.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.GetViewDataContext">
            <summary>
            Gets or sets the logic that gets view data context.
            </summary>
            <value>
            The logic that gets view data context.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultGetViewDataContext">
            <summary>
            Default: Gets or sets the logic that gets view data context.
            </summary>
            <value>
            The logic that gets view data context.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.AttachViewToViewModel">
            <summary>
            Gets or sets the attach view to view model handler.
            </summary>
            <value>
            The attach view to view model handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultAttachViewToViewModel">
            <summary>
            Default: Gets or sets the attach view to view model handler.
            </summary>
            <value>
            The attach view to view model handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.GetViewOfViewModel">
            <summary>
            Gets the view of the given view model.
            </summary>
            <value>
            The get view of view model handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultGetViewOfViewModel">
            <summary>
            Default: Gets the view of the given view model.
            </summary>
            <value>
            The get view of view model handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.TryHookClosedEventOfHostOf">
            <summary>
            Tries to hook closed event of an the element in the visual tree that hosts this given view.
            If the hook succedeed the given callback will be called once the hosting element is closed.
            </summary>
            <returns>The element, that supports closed notifications, in the visual tree that hosts the given view; otherwise <c>null</c>.</returns>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultTryHookClosedEventOfHostOf">
            <summary>
            Default: Tries to hook closed event of an the element in the visual tree that hosts this given view.
            If the hook succedeed the given callback will be called once the hosting element is closed.
            </summary>
            <returns>The element, that supports closed notifications, in the visual tree that hosts the given view; otherwise <c>null</c>.</returns>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.IsHostingView">
            <summary>
            Gets or sets the convention that determines if the given FrameworkElement is a hosting view.
            </summary>
            <value>
            The convention that determines if the given FrameworkElement is a hosting view.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultIsHostingView">
            <summary>
            Default: Gets or sets the convention that determines if the given FrameworkElement is a hosting view.
            </summary>
            <value>
            The convention that determines if the given FrameworkElement is a hosting view.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.AttachViewBehaviors">
            <summary>
            Gets an opportunity to attach behaviors to the view.
            </summary>
            <value>
            The attach view behaviors handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultAttachViewBehaviors">
            <summary>
            Default: Gets an opportunity to attach behaviors to the view.
            </summary>
            <value>
            The attach view behaviors handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DetachViewBehaviors">
            <summary>
            Gets an opportunity to detach behaviors from the view.
            </summary>
            <value>
            The detach view behaviors handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultDetachViewBehaviors">
            <summary>
            Default: Gets an opportunity to detach behaviors from the view.
            </summary>
            <value>
            The detach view behaviors handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler.DefaultViewDataContextSearchBehavior">
            <summary>
            Gets or sets the default view data context search behavior.
            </summary>
            <value>
            The default view data context search behavior.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.ViewDataContextSearchBehavior">
            <summary>
            Determines how the DataContext value is searched on a view.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.ComponentModel.ViewDataContextSearchBehavior.LocalOnly">
            <summary>
            The DataContext dependency property value is retrieved using the ReadLocalValue
            method of the view and if the returned value is UnsetLocal null is returned to 
            the caller so to ensure that only locally set DataContexts are returned.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.ComponentModel.ViewDataContextSearchBehavior.Legacy">
            <summary>
            The DataContext property of the View element is returned regardless
            of the fact that the dependency property value is inherithed or local.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.ViewReleaseBehavior">
            <summary>
            Define the View release behavior
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.ComponentModel.ViewReleaseBehavior.Default">
            <summary>
            The view, and thus the ViewModel, is released only if no <see cref="T:Topics.Radical.Windows.Presentation.ComponentModel.ViewManualReleaseAttribute"/> is defined on the View.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.ComponentModel.ViewReleaseBehavior.Force">
            <summary>
            The view, and thus the ViewModel, is released regardless of the <see cref="T:Topics.Radical.Windows.Presentation.ComponentModel.ViewManualReleaseAttribute"/> that can be defined on the View.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IExpectViewClosingCallback">
            <summary>
            Defines that a ViewModel expects lifecycle notifications from the view.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IExpectViewClosingCallback.OnViewClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when the view is closing.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IExpectViewClosedCallback">
            <summary>
            Defines that a ViewModel expects lifecycle notifications from the view.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IExpectViewClosedCallback.OnViewClosed">
            <summary>
            Called when the view is closed.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IExpectViewActivatedCallback">
            <summary>
            Defines that a ViewModel expects lifecycle notifications from the view.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IExpectViewActivatedCallback.OnViewActivated">
            <summary>
            Called when the view is activated.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IExpectViewLoadedCallback">
            <summary>
            Defines that a ViewModel expects lifecycle notifications from the view.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IExpectViewLoadedCallback.OnViewLoaded">
            <summary>
            Called when the view is loaded.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IExpectViewShownCallback">
            <summary>
            Defines that a ViewModel expects lifecycle notifications from the view.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IExpectViewShownCallback.OnViewShown">
            <summary>
            Called when the view is shown.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.ICanBeValidated">
            <summary>
            Defines a ViewModel, or any other type, as something that supports 
            a validation process.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.ICanBeValidated.Validate">
            <summary>
            Validates this instance.
            </summary>
            <returns><c>true</c> if this instance is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.ICanBeValidated.Validate(Topics.Radical.Windows.Presentation.ComponentModel.ValidationBehavior)">
            <summary>
            Validates this instance.
            </summary>
            <param name="behavior">The behavior.</param>
            <returns>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.ICanBeValidated.Validate(System.String,Topics.Radical.Windows.Presentation.ComponentModel.ValidationBehavior)">
            <summary>
            Validates this instance.
            </summary>
            <param name="ruleSet">The rule set.</param>
            <param name="behavior">The behavior.</param>
            <returns>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.ICanBeValidated.TriggerValidation">
            <summary>
            Triggers the validation process on this instances forcing all the invalid
            fields to notify their invalid status.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.ICanBeValidated.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.ICanBeValidated.ValidationErrors">
            <summary>
            Gets the validation errors.
            </summary>
            <value>The validation errors.</value>
        </member>
        <member name="E:Topics.Radical.Windows.Presentation.ComponentModel.ICanBeValidated.Validated">
            <summary>
            Occurs when when the validation process is completed.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.NotifyLoadedAttribute">
            <summary>
            Applied to a ViewModel issues automatically a ViewModelLoaded message.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.Regions.InjectViewInRegionAttribute">
            <summary>
            Defines that a view want to be injected in the region identified by the region name.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.Regions.InjectViewInRegionAttribute.Named">
            <summary>
            Gets or sets the name of the region.
            </summary>
            <value>
            The name of the region.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.ToolkitComponentAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.ValidationBehavior">
            <summary>
            Determines the behavior of the validation process.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.ComponentModel.ValidationBehavior.Default">
            <summary>
            The default behavior.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.ComponentModel.ValidationBehavior.TriggerValidationErrorsOnFailure">
            <summary>
            Automatically trigger controls error view if the validation fails.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.ValidationResetBehavior">
            <summary>
            Determines the reset behavior.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.ComponentModel.ValidationResetBehavior.ErrorsOnly">
            <summary>
            Resets only the errors collection.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.ComponentModel.ValidationResetBehavior.ValidationTracker">
            <summary>
            Resets only the validation tracker that tracks if validation for properties has been called at least once.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.ComponentModel.ValidationResetBehavior.All">
            <summary>
            Resets both the validation tracker and the errors collection.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService">
            <summary>
            Defines a validation service that can be used to validate an entity or a ViewModel.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService.GetInvalidProperties">
            <summary>
            Gets the invalid properties.
            </summary>
            <returns>A list of property names that identifies the invalid properties.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService.Validate">
            <summary>
            Starts the validation process.
            </summary>
            <returns><c>True</c> if the validation process succedeed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService.ValidateRuleSet(System.String)">
            <summary>
            Starts the validation process.
            </summary>
            <param name="ruleSet">The rule set.</param>
            <returns>
              <c>True</c> if the validation process succedeed; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService.Validate(System.String)">
            <summary>
            Validates the specified property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>The validation error message if any; otherwise a null or empty string.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService.ValidateRuleSet(System.String,System.String)">
            <summary>
            Starts the validation process.
            </summary>
            <param name="ruleSet">The rule set.</param>
            <param name="propertyName">The name of the property to validate.</param>
            <returns>The validation error message if any; otherwise a null or empty string.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService.Reset">
            <summary>
            Clears the validation state resetting to it its default valid value.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService.Reset(Topics.Radical.Windows.Presentation.ComponentModel.ValidationResetBehavior)">
            <summary>
            Clears the validation state resetting to it its default valid value.
            </summary>
            <param name="resetBehavior">The reset behavior.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService.SuspendValidation">
            <summary>
            Suspends the validation.
            </summary>
            <returns>A disposable instance to automatically resume validation on dispose.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService.ResumeValidation">
            <summary>
            Resumes the validation.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService.GetPropertyDisplayName``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the display name of the property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService.GetPropertyDisplayName(System.Object,System.String)">
            <summary>
            Gets the display name of the property.
            </summary>
            <param name="entity">The entity.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService.IsValid">
            <summary>
            Gets a value indicating whether the validation process
            returns a valid response or not.
            </summary>
            <value><c>true</c> if the validation process has successfully passed the validation process.; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService.StatusChanged">
            <summary>
            Occurs when validation status changes.
            </summary>
        </member>
        <member name="E:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService.ValidationReset">
            <summary>
            Occurs when this service is resetted.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService.ValidationErrors">
            <summary>
            Gets the validation errors.
            </summary>
            <value>All the validation errors.</value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService.IsValidationSuspended">
            <summary>
            Gets a value indicating whether the validation process is suspended.
            </summary>
            <value>
            	<c>true</c> if the validation process is suspended; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService.MergeValidationErrors">
            <summary>
            Gets or sets if the service should merge validation errors related to the same property.
            </summary>
            <value>
            <c>True</c> if the service should merge validation errors related to the same property; otherwise <c>False</c>.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IView">
            <summary>
            Defines a view.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IView.DataContext">
            <summary>
            Gets or sets the data context.
            </summary>
            <value>
            The data context.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IViewResolver">
            <summary>
            Resolves views providing support for a View first approach.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IViewResolver.GetView``1">
            <summary>
            Gets the view.
            </summary>
            <typeparam name="T">The type of the view.</typeparam>
            <returns>The view instance.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IViewResolver.GetView``1(System.Action{System.Object})">
            <summary>
            Gets the view.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="viewModelInterceptor">The view model interceptor.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IViewResolver.GetView``2(System.Action{``1})">
            <summary>
            Gets the view.
            </summary>
            <typeparam name="TView">The type of the view.</typeparam>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <param name="viewModelInterceptor">The view model interceptor.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IViewResolver.GetView(System.Type)">
            <summary>
            Gets the view of the given type.
            </summary>
            <returns>The view instance.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IViewResolver.GetView(System.Type,System.Action{System.Object})">
            <summary>
            Gets the view.
            </summary>
            <param name="viewType">Type of the view.</param>
            <param name="viewModelInterceptor">The view model interceptor.</param>
            <returns></returns>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.ActiveContentChangedEventArgs">
            <summary>
            The ActiveContentChanged events arguments.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.ActiveContentChangedEventArgs.#ctor(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.ComponentModel.ActiveContentChangedEventArgs"/> class.
            </summary>
            <param name="activeContent">Content of the active.</param>
            <param name="previousActiveContent">Content of the previous active.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.ActiveContentChangedEventArgs.ActiveContent">
            <summary>
            Gets the content of the active.
            </summary>
            <value>
            The content of the active.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.ActiveContentChangedEventArgs.PreviousActiveContent">
            <summary>
            Gets the content of the previous active.
            </summary>
            <value>
            The content of the previous active.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.ActiveContentChangedEventArgs.HasActiveContent">
            <summary>
            Gets a value indicating whether there is an active content.
            </summary>
            <value>
            	<c>true</c> if there is an active content; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Helpers.EnvironmentHelper">
            <summary>
            An helper calss for environment information.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Helpers.EnvironmentHelper.GetCurrentDirectory">
            <summary>
            Gets the current directory.
            </summary>
            <returns>The directory the executable is running from.</returns>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownRequest">
            <summary>
            Issue a request to shutdown the current application.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownRequest"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownRequest.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownRequest"/> class.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Messaging.ApplicationBootCompleted">
            <summary>
            Issue to notify that the application boot process has been completed.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ApplicationBootCompleted.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ApplicationBootCompleted"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ApplicationBootCompleted.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ApplicationBootCompleted"/> class.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownRequested">
            <summary>
            Notifies that a request to shutdown request has been issued.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownRequested.#ctor(Topics.Radical.Windows.Presentation.Boot.ApplicationShutdownReason)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownRequested"/> class.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownRequested.#ctor(System.Object,Topics.Radical.Windows.Presentation.Boot.ApplicationShutdownReason)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownRequested"/> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownRequested.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownRequested"/> is cancelled.
            </summary>
            <value>
              <c>true</c> if cancel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownRequested.Reason">
            <summary>
            Gets the shutdown reason.
            </summary>
            <value>
            The shutdown reason.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdown">
            <summary>
            Notifies that the application is shutting down.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdown.#ctor(Topics.Radical.Windows.Presentation.Boot.ApplicationShutdownReason)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdown"/> class.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdown.#ctor(System.Object,Topics.Radical.Windows.Presentation.Boot.ApplicationShutdownReason)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdown"/> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdown.Reason">
            <summary>
            Gets the shutdown reason.
            </summary>
            <value>
            The shutdown reason.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownCanceled">
            <summary>
            Notifies that the application shutdown has been canceled.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownCanceled.#ctor(Topics.Radical.Windows.Presentation.Boot.ApplicationShutdownReason)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownCanceled"/> class.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownCanceled.#ctor(System.Object,Topics.Radical.Windows.Presentation.Boot.ApplicationShutdownReason)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownCanceled"/> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Messaging.ApplicationShutdownCanceled.Reason">
            <summary>
            Gets the shutdown reason.
            </summary>
            <value>
            The shutdown reason.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Messaging.ViewLoaded">
            <summary>
            Domain event that identifies that a view has been loaded.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ViewLoaded.#ctor(System.Windows.DependencyObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ViewLoaded"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ViewLoaded.#ctor(System.Object,System.Windows.DependencyObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ViewLoaded"/> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="view">The view.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Messaging.ViewLoaded.View">
            <summary>
            Gets the view.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Messaging.ViewModelActivated">
            <summary>
            Domain event that identifies that a view model has been activated.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ViewModelActivated.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ViewModelActivated"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ViewModelActivated.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ViewModelActivated"/> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Messaging.ViewModelActivated.ViewModel">
            <summary>
            Gets the view model.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Messaging.ViewModelClosing">
            <summary>
            Domain event that identifies that a view model is closing.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ViewModelClosing.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ViewModelClosing"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ViewModelClosing.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ViewModelClosing"/> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Messaging.ViewModelClosing.ViewModel">
            <summary>
            Gets the view model.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Messaging.ViewModelClosing.Cancel">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ViewModelClosing"/> should be canceled.
            </summary>
            <value>
              <c>true</c> if cancel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Messaging.ViewModelClosed">
            <summary>
            Domain event that identifies that a view model has been closed.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ViewModelClosed.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ViewModelClosed"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ViewModelClosed.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ViewModelClosed"/> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Messaging.ViewModelClosed.ViewModel">
            <summary>
            Gets the view model.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Messaging.ViewModelLoaded">
            <summary>
            Domain event that identifies that a view model has been loaded.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ViewModelLoaded.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ViewModelLoaded"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ViewModelLoaded.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ViewModelLoaded"/> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Messaging.ViewModelLoaded.ViewModel">
            <summary>
            Gets the view model.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Regions.RegionExtensions">
            <summary>
            Region extensions.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionExtensions.SetContentAsync(Topics.Radical.Windows.Presentation.ComponentModel.IContentRegion,System.Func{System.Windows.DependencyObject},System.Int32)">
            <summary>
            Loads the given content async in the supplied region.
            </summary>
            <param name="region">The region</param>
            <param name="viewFactory">the view factory</param>
            <param name="millisecondsDelay">The async load delay.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionExtensions.AddContentAsync(Topics.Radical.Windows.Presentation.ComponentModel.IElementsRegion,System.Func{System.Windows.DependencyObject},System.Int32)">
            <summary>
            Add the given content async to the supplied region.
            </summary>
            <param name="region">the region.</param>
            <param name="viewFactory">the view factory</param>
            <param name="millisecondsDelay">The async load delay.</param>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Regions.RegionManagerFactory">
            <summary>
            Default region manager factory.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IRegionManagerFactory">
            <summary>
            A region manager factory.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegionManagerFactory.Create">
            <summary>
            Creates a new region manager.
            </summary>
            <returns>A new region manager.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionManagerFactory.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Regions.RegionManagerFactory"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionManagerFactory.Create">
            <summary>
            Creates a new region manager.
            </summary>
            <returns>
            A new region manager.
            </returns>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Regions.RegionHeaderedElement">
            <summary>
            A static class used to manage the attached properties for a region headered element.
            Use this class to easily add a custom Header to any <see cref="T:System.Windows.DependencyObject"/> that will be injected in a <see cref="T:Topics.Radical.Windows.Presentation.Regions.TabControlRegion"/>.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.Regions.RegionHeaderedElement.HeaderProperty">
            <summary>
            Identifies the Topics.Radical.Windows.Presentation.Regions.Specialized.RegionHeaderedElement.Header dependency property.
            </summary>
            <returns>The identifier for the Topics.Radical.Windows.Presentation.Regions.Specialized.RegionHeaderedElement.Header dependency property.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionHeaderedElement.SetHeader(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the value of the Topics.Radical.Windows.Presentation.Regions.Specialized.RegionHeaderedElement.Header attached property for a specified dependency object.
            </summary>
            <param name="element">The dependency object for which to set the value of the Topics.Radical.Windows.Presentation.Regions.Specialized.RegionHeaderedElement.Header property.</param>
            <param name="value">The new value to set the property to.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionHeaderedElement.GetHeader(System.Windows.DependencyObject)">
            <summary>
            Returns the value of the Topics.Radical.Windows.Presentation.Regions.Specialized.RegionHeaderedElement.Header attached property for a specified dependency object.
            </summary>
            <param name="element">The dependency object for which to retrieve the value of the Topics.Radical.Windows.Presentation.Regions.Specialized.RegionHeaderedElement.Header property.</param>
            <returns>The current value of the Topics.Radical.Windows.Presentation.Regions.Specialized.RegionHeaderedElement.Header attached property on the specified dependency object.</returns>
            <exception cref="T:System.ArgumentNullException">d is null.</exception>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Regions.TabControlRegion">
            <summary>
            A switching elements region hosted by a TabControl.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Regions.SwitchingElementsRegion`1">
            <summary>
            A base abstract implementation for the <see cref="T:Topics.Radical.Windows.Presentation.ComponentModel.ISwitchingElementsRegion"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Regions.ElementsRegion`1">
            <summary>
            A base abstract implementation of the <see cref="T:Topics.Radical.Windows.Presentation.ComponentModel.IElementsRegion"/>.
            </summary>
            <typeparam name="T">The type of the element that hosts this region.</typeparam>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Regions.Region`1">
            <summary>
            A base abstract implementation of a region and it's relative markup extension.
            </summary>
            <typeparam name="T">The type of the element that hosts this region.</typeparam>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IRegion">
            <summary>
            A region identifies a pluggable area in the user interface, 
            where shell and modules can plug their own UI.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegion.Shutdown">
            <summary>
            Shutdowns this region, the shutdown process is invoked by the hosting region manager at close time.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IRegion.Name">
            <summary>
            Gets the name of the region.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IRegion.HostingView">
            <summary>
            Gets the view that hosts this region.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IRegion.AsyncLoadDelay">
            <summary>
            The number of milliseconds to wait before loading the region content.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.Regions.Region`1.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.Region`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Regions.Region`1"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.Region`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Regions.Region`1"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.Region`1.OnElementChanged">
            <summary>
            Called when when the element is changed.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.Region`1.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.Region`1.Shutdown">
            <summary>
            Closes this region, the close process is invoked by the host at close time.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.Region`1.NotifyClosedAndEnsureRelease(System.Windows.DependencyObject)">
            <summary>
            Notify via IExpectViewClosedCallback and release the resources, even for nested views.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.Region`1.FindHostingViewOf(System.Windows.FrameworkElement)">
            <summary>
            Finds the hosting view of the given FramerowkElement.
            </summary>
            <param name="fe">The fe.</param>
            <returns></returns>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Regions.Region`1.HostingView">
            <summary>
            Gets the view that hosts this region.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Regions.Region`1.Name">
            <summary>
            Gets the name of the region.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Regions.Region`1.AsyncLoadDelay">
            <summary>
            The number of milliseconds to wait before loading the region content.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Regions.Region`1.Element">
            <summary>
            Gets the element.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IElementsRegion">
            <summary>
            A regione that holds a list of elements.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IElementsRegion.Add(System.Windows.DependencyObject)">
            <summary>
            Adds the specified view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IElementsRegion.Remove(System.Windows.DependencyObject)">
            <summary>
            Removes the specified view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IElementsRegion.GetElements``1">
            <summary>
            Gets the elements, in this region, of the given type T.
            </summary>
            <typeparam name="TView">The type of the elements to find.</typeparam>
            <returns>A list of elements of the given type T.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ElementsRegion`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Regions.ElementsRegion`1"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ElementsRegion`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Regions.ElementsRegion`1"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ElementsRegion`1.Shutdown">
            <summary>
            Closes this region, the close process is invoked by the host at close time.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ElementsRegion`1.Add(System.Windows.DependencyObject)">
            <summary>
            Adds the specified view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ElementsRegion`1.OnAdd(System.Windows.DependencyObject)">
            <summary>
            Called before the add operation.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ElementsRegion`1.OnAdded(System.Windows.DependencyObject)">
            <summary>
            Called after the add operation.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ElementsRegion`1.Remove(System.Windows.DependencyObject)">
            <summary>
            Removes the specified view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ElementsRegion`1.Remove(System.Windows.DependencyObject,Topics.Radical.Windows.Presentation.Regions.RemoveReason)">
            <summary>
            Removes the specified view.
            </summary>
            <param name="view">The view.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ElementsRegion`1.OnRemove(System.Windows.DependencyObject,Topics.Radical.Windows.Presentation.Regions.RemoveReason)">
            <summary>
            Called before the remove operation.
            </summary>
            <param name="view">The view.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ElementsRegion`1.OnRemoved(System.Windows.DependencyObject,Topics.Radical.Windows.Presentation.Regions.RemoveReason)">
            <summary>
            Called after the remove operation.
            </summary>
            <param name="view">The view.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ElementsRegion`1.GetElements``1">
            <summary>
            Gets the elements, in this region, of the given type T.
            </summary>
            <typeparam name="TView">The type of the elements to find.</typeparam>
            <returns>
            A list of elements of the given type T.
            </returns>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.ISwitchingElementsRegion">
            <summary>
            A region that holds elements that can be switched, e.g. a Tab Control.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.ISwitchingElementsRegion.Activate(System.Windows.DependencyObject)">
            <summary>
            Activates the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.ISwitchingElementsRegion.ActiveContent">
            <summary>
            Gets the content of the active.
            </summary>
            <value>
            The content of the active.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.ISwitchingElementsRegion.PreviousActiveContent">
            <summary>
            Gets the content of the previous active.
            </summary>
            <value>
            The content of the previous active.
            </value>
        </member>
        <member name="E:Topics.Radical.Windows.Presentation.ComponentModel.ISwitchingElementsRegion.ActiveContentChanged">
            <summary>
            Occurs when the active content changes.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.SwitchingElementsRegion`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Regions.SwitchingElementsRegion`1"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.SwitchingElementsRegion`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Regions.SwitchingElementsRegion`1"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.SwitchingElementsRegion`1.OnActiveContentChanged">
            <summary>
            Called when the active content is changed.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.SwitchingElementsRegion`1.Activate(System.Windows.DependencyObject)">
            <summary>
            Activates the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Regions.SwitchingElementsRegion`1.ActiveContent">
            <summary>
            Gets the content of the active.
            </summary>
            <value>
            The content of the active.
            </value>
        </member>
        <member name="E:Topics.Radical.Windows.Presentation.Regions.SwitchingElementsRegion`1.ActiveContentChanged">
            <summary>
            Occurs when the active content changes.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Regions.SwitchingElementsRegion`1.PreviousActiveContent">
            <summary>
            Gets the content of the previous active.
            </summary>
            <value>
            The content of the previous active.
            </value>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.TabControlRegion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Regions.TabControlRegion"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.TabControlRegion.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Regions.TabControlRegion"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.TabControlRegion.OnAdd(System.Windows.DependencyObject)">
            <summary>
            Called before the add operation.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.TabControlRegion.OnRemove(System.Windows.DependencyObject,Topics.Radical.Windows.Presentation.Regions.RemoveReason)">
            <summary>
            Called after the add operation.
            </summary>
            <param name="view">The view.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.TabControlRegion.Activate(System.Windows.DependencyObject)">
            <summary>
            Activates the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Regions.TabControlRegion.ActiveContent">
            <summary>
            Gets the content of the active.
            </summary>
            <value>
            The content of the active.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Regions.ContentRegion`1">
            <summary>
            A base abstract implementation of the <see cref="T:Topics.Radical.Windows.Presentation.ComponentModel.IContentRegion"/>.
            </summary>
            <typeparam name="T">The type of the element that hosts this region.</typeparam>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IContentRegion">
            <summary>
            A region that holds a single, replaceble, content.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IContentRegion.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ContentRegion`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Regions.ContentRegion`1"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ContentRegion`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Regions.ContentRegion`1"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ContentRegion`1.Shutdown">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ContentRegion`1.OnGetContent">
            <summary>
            Called to get content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ContentRegion`1.OnSetContent(System.Windows.DependencyObject,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called to set new content.
            </summary>
            <param name="view">The view.</param>
            <param name="args">The cancel even arguments.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ContentRegion`1.OnContentSet(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Called when content has been set.
            </summary>
            <param name="actual">The actual.</param>
            <param name="previous">The previous.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Regions.ContentRegion`1.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Regions.RemoveReason">
            <summary>
            The reason why an element is removed from an elements region.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.Regions.RemoveReason.UserRequest">
            <summary>
            The request comes from the interactive user.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.Regions.RemoveReason.InternalRequest">
            <summary>
            The request is due to internal framework behavior.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IRegionManager">
            <summary>
            A region manager is responsible for managing region lifetime and arrangement.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegionManager.RegisterRegion(Topics.Radical.Windows.Presentation.ComponentModel.IRegion)">
            <summary>
            Registers the supplied region in this region manager.
            </summary>
            <param name="region">The region to register.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegionManager.GetAllRegisteredRegions">
            <summary>
            Gets all the registered the regions.
            </summary>
            <returns>All the registered the regions.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegionManager.GetRegion(System.String)">
            <summary>
            Gets the region registered with the given name.
            </summary>
            <param name="name">The name of the region.</param>
            <returns>The searched region, or an ArgumentOutOfRangeException if no region is registered with the given name.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegionManager.GetRegion``1(System.String)">
            <summary>
            Gets the region.
            </summary>
            <typeparam name="TRegion">The type of the region.</typeparam>
            <param name="name">The name.</param>
            <returns>The searched region, or an ArgumentOutOfRangeException if no region is registered with the given name.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegionManager.TryGetRegion(System.String,Topics.Radical.Windows.Presentation.ComponentModel.IRegion@)">
            <summary>
            Tries to get the region.
            </summary>
            <param name="regionName">Name of the region.</param>
            <param name="region">The region.</param>
            <returns>
              <c>True</c> if the region has been found; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegionManager.TryGetRegion``1(System.String,``0@)">
            <summary>
            Tries to get the region.
            </summary>
            <typeparam name="TRegion">The type of the region.</typeparam>
            <param name="regionName">Name of the region.</param>
            <param name="region">The region.</param>
            <returns><c>True</c> if the region has been found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegionManager.Shutdown">
            <summary>
            Shutdowns this region manager, the shutdown process is invoked by the region service at close time.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IRegionManager.Item(System.String)">
            <summary>
            Gets the <see cref="T:Topics.Radical.Windows.Presentation.ComponentModel.IRegion"/> with the specified name.
            </summary>
            <value>THe requested region.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">An ArgumentOutOfRangeException is raised if a region with the specifed name cannot be found.</exception>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IRegionService">
            <summary>
            The region service is responsible for managing regions, shell regions and
            modules specific regions.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegionService.HoldsRegionManager(System.Windows.DependencyObject)">
            <summary>
            Determines if this region service has knowledge of a region manager owned
            by the supplied owner.
            </summary>
            <param name="owner">The owner.</param>
            <returns>True if this region service has a reference to a region manager owned by the supplied owner, otherwise false.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegionService.GetRegionManager(System.Windows.DependencyObject)">
            <summary>
            Gets the region manager owned by the supplied view.
            </summary>
            <param name="owner">The owner.</param>
            <returns>A reference to the requested region manager.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">An ArgumentOutOfRangeException is raised if this service has no knowledge of a region manager owned by the supplied owner. Use HoldsRegionManager() to test.</exception>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegionService.GetKnownRegionManager``1">
            <summary>
            Gets a known region manager. A known region manager is a region
            manager associated with a view type and not with a view instance.
            Tipically this region manager is a static region manager that exists
            for all the application lifecycle. A good sample of a known region
            manager is the Shell RegionManager that exists always.
            </summary>
            <typeparam name="TView">The type of the view.</typeparam>
            <returns>The requested region manager</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegionService.FindRegionManager(System.Func{System.Windows.DependencyObject,Topics.Radical.Windows.Presentation.ComponentModel.IRegionManager,System.Boolean})">
            <summary>
            Finds a region manager given a custom search logic.
            </summary>
            <param name="filter">A predicate executed for all the registered region managers.</param>
            <returns>The found region manager or null.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegionService.RegisterRegionManager(System.Windows.DependencyObject)">
            <summary>
            Registers a new region manager for the given owner.
            </summary>
            <param name="owner">The owner.</param>
            <returns>The newly registered region manager.</returns>
            <exception cref="T:System.NotSupportedException">A NotSupportedException is raised if this service has already registered a region manager for the supplied owner. Use HoldsRegionManager() to test.</exception>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegionService.UnregisterRegionManager(System.Windows.DependencyObject)">
            <summary>
            Unregisters the region manager owned by the supplied owner.
            </summary>
            <param name="owner">The owner of the region manager to unregister.</param>
            <exception cref="T:System.NotSupportedException">A NotSupportedException is raised if this service has no region manager registered for the supplied owner. Use HoldsRegionManager() to test.</exception>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegionService.UnregisterRegionManager(System.Windows.DependencyObject,Topics.Radical.Windows.Presentation.ComponentModel.UnregisterBehavior)">
            <summary>
            Unregisters the region manager owned by the supplied owner.
            </summary>
            <param name="owner">The owner of the region manager to unregister.</param>
            <param name="behavior">How to manage reguion manager found in child/nested views.</param>
            <exception cref="T:System.NotSupportedException">A NotSupportedException is raised if this service has no region manager registered for the supplied owner. Use HoldsRegionManager() to test.</exception>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.UnregisterBehavior">
            <summary>
            Determins the behavior the the region service should respect when un-registering region managers.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.ComponentModel.UnregisterBehavior.Default">
            <summary>
            Only the given region manager will be unregistered.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.ComponentModel.UnregisterBehavior.WholeLogicalTreeChain">
            <summary>
            The logical tree will be scanned, down, looking for region managers hold by nested views, if any it will be unregistered.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionHilightAdorner.#ctor(System.Windows.UIElement,Topics.Radical.Windows.Presentation.ComponentModel.IRegion,System.Windows.Media.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Regions.RegionHilightAdorner"/> class.
            </summary>
            <param name="adornedElement">The adorned element.</param>
            <param name="region">The region.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionHilightAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Regions.RegionHilightAdorner.Content">
            <summary>
            Gets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Regions.RegionManager">
            <summary>
            Default region manager.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionManager.RegisterRegion(Topics.Radical.Windows.Presentation.ComponentModel.IRegion)">
            <summary>
            Registers the supplied region in this region manager.
            </summary>
            <param name="region">The region to register.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionManager.GetRegion(System.String)">
            <summary>
            Gets the region registered with the given name.
            </summary>
            <param name="name">The name of the region.</param>
            <returns>
            The searched region, or an ArgumentOutOfRangeException if no region is registered with the given name.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionManager.GetRegion``1(System.String)">
            <summary>
            Gets the region.
            </summary>
            <typeparam name="TRegion">The type of the region.</typeparam>
            <param name="name">The name.</param>
            <returns>
            The searched region, or an ArgumentOutOfRangeException if no region is registered with the given name.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionManager.TryGetRegion(System.String,Topics.Radical.Windows.Presentation.ComponentModel.IRegion@)">
            <summary>
            Tries the get region.
            </summary>
            <param name="name">The name.</param>
            <param name="region">The region.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionManager.TryGetRegion``1(System.String,``0@)">
            <summary>
            Tries to get the region.
            </summary>
            <typeparam name="TRegion">The type of the region.</typeparam>
            <param name="regionName">Name of the region.</param>
            <param name="region">The region.</param>
            <returns>
              <c>True</c> if the region has been found; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionManager.Shutdown">
            <summary>
            Closes this region manager, the close process is invoked by the host at close time.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionManager.GetAllRegisteredRegions">
            <summary>
            Gets all the registered the regions.
            </summary>
            <returns>
            All the registered the regions.
            </returns>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Regions.RegionManager.Item(System.String)">
            <summary>
            Gets the <see cref="T:Topics.Radical.Windows.Presentation.ComponentModel.IRegion"/> with the specified name.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Regions.RegionService">
            <summary>
            The region service is responsible for managing regions, shell regions and
            modules specific regions.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.Regions.RegionService.RegionProperty">
            <summary>
            The region attached property.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionService.GetRegion(System.Windows.FrameworkElement)">
            <summary>
            Gets the region.
            </summary>
            <param name="control">The control.</param>
            <returns>The region.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionService.SetRegion(System.Windows.FrameworkElement,Topics.Radical.Windows.Presentation.ComponentModel.IRegion)">
            <summary>
            Sets the region.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionService.#ctor(Topics.Radical.Windows.Presentation.ComponentModel.IRegionManagerFactory,Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Regions.RegionService"/> class.
            </summary>
            <param name="regionManagerFactory">The region manager factory.</param>
            <param name="conventions">The conventions.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionService.HoldsRegionManager(System.Windows.DependencyObject)">
            <summary>
            Determines if this region service has knowledge of a region manager owned
            by the supplied owner (tipically an IView).
            </summary>
            <param name="owner">The owner.</param>
            <returns>
            True if this region service has a reference to a region manager owned by the supplied owner, otherwise false.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionService.GetRegionManager(System.Windows.DependencyObject)">
            <summary>
            Gets the region manager owned by the supplied view.
            </summary>
            <param name="owner">The owner.</param>
            <returns>
            A reference to the requested region manager.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">An ArgumentOutOfRangeException is raised if this service has no knowledge of a region manager owned by the supplied owner. Use HoldsRegionManager() to test.</exception>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionService.GetKnownRegionManager``1">
            <summary>
            Gets a known region manager. A known region manager is a region
            manager associated with a view type and not with a view instance.
            Tipically this region manager is a static region manager that exists
            for all the application lifecycle. A good sample of a known region
            manager is the Shell RegionManager that exists always.
            </summary>
            <typeparam name="TView">The type of the view.</typeparam>
            <returns>The requested region manager</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionService.FindRegionManager(System.Func{System.Windows.DependencyObject,Topics.Radical.Windows.Presentation.ComponentModel.IRegionManager,System.Boolean})">
            <summary>
            Finds a region manager given a custom search logic.
            </summary>
            <param name="filter">A predicate executed for all the registered region managers.</param>
            <returns>The found region manager or null.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionService.RegisterRegionManager(System.Windows.DependencyObject)">
            <summary>
            Registers a new region manager for the given owner.
            </summary>
            <param name="owner">The owner.</param>
            <returns>The newly registered region manager.</returns>
            <exception cref="T:System.NotSupportedException">A NotSupportedException is raised if this service has already registered a region manager for the supplied owner. Use HoldsRegionManager() to test.</exception>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionService.UnregisterRegionManager(System.Windows.DependencyObject)">
            <summary>
            Unregisters the region manager owned by the supplied owner.
            </summary>
            <param name="owner">The owner of the region manager to unregister.</param>
            <exception cref="T:System.NotSupportedException">A NotSupportedException is raised if this service has no region manager registered for the supplied owner. Use HoldsRegionManager() to test.</exception>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.RegionService.UnregisterRegionManager(System.Windows.DependencyObject,Topics.Radical.Windows.Presentation.ComponentModel.UnregisterBehavior)">
            <summary>
            Unregisters the region manager owned by the supplied owner.
            </summary>
            <param name="owner">The owner of the region manager to unregister.</param>
            <param name="behavior">How to manage reguion manager found in child/nested views.</param>
            <exception cref="T:System.NotSupportedException">A NotSupportedException is raised if this service has no region manager registered for the supplied owner. Use HoldsRegionManager() to test.</exception>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Regions.RegionService.Conventions">
            <summary>
            Gets or sets the conventions handler.
            </summary>
            <value>
            The conventions handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Regions.RegionService.CurrentService">
            <summary>
            Gets or sets the current service.
            </summary>
            <value>
            The current service.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Regions.ContentPresenterRegion">
            <summary>
            An content region hosted by a ContentPresenter.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ContentPresenterRegion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Regions.ContentPresenterRegion"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ContentPresenterRegion.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Regions.ContentPresenterRegion"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ContentPresenterRegion.OnGetContent">
            <summary>
            Called to get content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.ContentPresenterRegion.OnSetContent(System.Windows.DependencyObject,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called to set new content.
            </summary>
            <param name="view">The view.</param>
            <param name="args">The cancel even arguments.</param>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Regions.PanelRegion">
            <summary>
            An elements region hosted by a Panel.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.PanelRegion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Regions.PanelRegion"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.PanelRegion.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Regions.PanelRegion"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.PanelRegion.OnAdd(System.Windows.DependencyObject)">
            <summary>
            Called after the add operation.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Regions.PanelRegion.OnRemove(System.Windows.DependencyObject,Topics.Radical.Windows.Presentation.Regions.RemoveReason)">
            <summary>
            Called before the remove operation.
            </summary>
            <param name="view">The view.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Repeat">
            <summary>
            Allows to execute and action every time the given amount of time elapses.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Repeat.Every(System.TimeSpan)">
            <summary>
            Waits for the specified delay.
            </summary>
            <param name="delay">The delay.</param>
            <returns>A waiter ready to be configured.</returns>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Repeat.Repeater">
            <summary>
            A repeater for the repeat infrastucture.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Repeat.Repeater.This(System.Action)">
            <summary>
            After the delay executes the given action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Repeat.Repeater.Stop">
            <summary>
            Stops this repeater.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Messaging.CloseViewRequest">
            <summary>
            Issues a request to close the view currently associated with the view model that sends the message.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.CloseViewRequest.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.CloseViewRequest"/> class.
            </summary>
            <param name="viewOwner">The view owner.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.CloseViewRequest.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.CloseViewRequest"/> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="viewOwner">The view owner.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Messaging.CloseViewRequest.ViewOwner">
            <summary>
            Gets the view owner.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Messaging.CloseViewRequest.DialogResult">
            <summary>
            Gets or sets the dialog result.
            </summary>
            <value>
            The dialog result.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Messaging.ViewModelShown">
            <summary>
            Domain event that identifies that a view model has been shown.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ViewModelShown.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ViewModelShown"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Messaging.ViewModelShown.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Messaging.ViewModelShown"/> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Messaging.ViewModelShown.ViewModel">
            <summary>
            Gets the view model.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.ComponentModel.IRegionInjectionHandler">
            <summary>
            Handles the process to inject views into regions.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegionInjectionHandler.GetViewsInterestedIn(System.String)">
            <summary>
            Gets the views interested in the region identified by the given name.
            </summary>
            <param name="regionName">Name of the region.</param>
            <returns>
            A list of view types.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegionInjectionHandler.RegisterViewAsInterestedIn(System.String,System.Type)">
            <summary>
            Registers the view as interested in the region that has the given region name.
            </summary>
            <param name="regionName">Name of the region.</param>
            <param name="viewType">Type of the view.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.ComponentModel.IRegionInjectionHandler.RegisterViewsAsInterestedIn(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Registers the views as interested in the region that has the given region name.
            </summary>
            <param name="regionName">Name of the region.</param>
            <param name="views">The views.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.ComponentModel.IRegionInjectionHandler.Inject">
            <summary>
            Gets or sets the inject handler used to inject the given view into the given region.
            </summary>
            <value>
            The inject handler.
            </value>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.RegionInjectionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Services.RegionInjectionHandler"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.RegionInjectionHandler.GetViewsInterestedIn(System.String)">
            <summary>
            Gets the views interested in the region identified by the given name.
            </summary>
            <param name="regionName">Name of the region.</param>
            <returns>
            A list of view types.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.RegionInjectionHandler.RegisterViewAsInterestedIn(System.String,System.Type)">
            <summary>
            Registers the view as interested in the region that has the given region name.
            </summary>
            <param name="regionName">Name of the region.</param>
            <param name="viewType">Type of the view.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.RegionInjectionHandler.RegisterViewsAsInterestedIn(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Registers the views as interested in the region that has the given region name.
            </summary>
            <param name="regionName">Name of the region.</param>
            <param name="views">The views.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.RegionInjectionHandler.Inject">
            <summary>
            Gets or sets the inject handler used to inject the given view into the given region.
            </summary>
            <value>
            The inject handler.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService">
            <summary>
            Provides a base implementation of the <see cref="T:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService"/> interface.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.Validate(System.String)">
            <summary>
            Validates the specified property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>
            The validation error message if any; otherwise a null or empty string.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.ValidateRuleSet(System.String,System.String)">
            <summary>
            Starts the validation process.
            </summary>
            <param name="ruleSet">The rule set.</param>
            <param name="propertyName">The name of the property to validate.</param>
            <returns>
            The validation error message if any; otherwise a null or empty string.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.OnStatusChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:StatusChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.OnValidationReset(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ValidationReset"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.AddValidationErrors(Topics.Radical.Validation.ValidationError[])">
            <summary>
            Adds the validation errors.
            </summary>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.ClearErrors">
            <summary>
            Clears all the current validation errors.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.Validate">
            <summary>
            Starts the validation process.
            </summary>
            <returns>
              <c>True</c> if the validation process succedeed; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.ValidateRuleSet(System.String)">
            <summary>
            Starts the validation process.
            </summary>
            <param name="ruleSet">The rule set.</param>
            <returns>
              <c>True</c> if the validation process succedeed; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.OnValidate(System.String)">
            <summary>
            Called in order to execute the concrete validation process.
            </summary>
            <param name="ruleSet">The rule set.</param>
            <returns>
            A list of <seealso cref="T:Topics.Radical.Validation.ValidationError"/>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.OnValidateProperty(System.String,System.String)">
            <summary>
            Called in order to execute the concrete validation process on the given property.
            </summary>
            <param name="ruleSet">The rule set.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
            A list of <seealso cref="T:Topics.Radical.Validation.ValidationError"/>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.GetInvalidProperties">
            <summary>
            Gets the invalid properties.
            </summary>
            <returns>
            A list of property names that identifies the invalid properties.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.Reset">
            <summary>
            Clears the validation state resetting to its default valid value.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.Reset(Topics.Radical.Windows.Presentation.ComponentModel.ValidationResetBehavior)">
            <summary>
            Clears the validation state resetting to its default valid value.
            </summary>
            <param name="resetBehavior">The reset behavior.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.SuspendValidation">
            <summary>
            Suspends the validation.
            </summary>
            <returns>A disposable instance to automatically resume validation on dispose.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.ResumeValidation">
            <summary>
            Resumes the validation.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.GetPropertyDisplayName``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the display name of the property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.GetPropertyDisplayName(System.Object,System.String)">
            <summary>
            Gets the display name of the property.
            </summary>
            <param name="entity">The entity.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.IsValid">
            <summary>
            Gets a value indicating whether the validation process
            returns a valid response or not.
            </summary>
            <value>
            	<c>true</c> if the validation process has successfully passed the validation process.; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.StatusChanged">
            <summary>
            Occurs when validation status changes.
            </summary>
        </member>
        <member name="E:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.ValidationReset">
            <summary>
            Occurs when this service is resetted.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.ValidationErrors">
            <summary>
            Gets the validation errors.
            </summary>
            <value>
            All the validation errors.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.IsValidationSuspended">
            <summary>
            Gets a value indicating whether the validation process is suspended.
            </summary>
            <value>
            	<c>true</c> if the validation process is suspended; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.Validation.AbstractValidationService.MergeValidationErrors">
            <summary>
            Gets or sets if the service should merge validation errors related to the same property.
            </summary>
            <value>
            <c>True</c> if the service should merge validation errors related to the same property; otherwise <c>False</c>.
            </value>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder">
            <summary>
            Handles Presentation conventions.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.#ctor(Topics.Radical.ComponentModel.Messaging.IMessageBroker,Topics.Radical.Windows.Presentation.ComponentModel.IReleaseComponents,Topics.Radical.Windows.Presentation.Boot.BootstrapConventions)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder"/> class.
            </summary>
            <param name="broker">The broker.</param>
            <param name="releaser">The releaser.</param>
            <param name="bootstrapConventions">The Bootstrap Conventions</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.ResolveViewModelType">
            <summary>
            Gets or sets the view model type resolver that can resolve the view model type given the view type.
            </summary>
            <value>
            The view model type resolver.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultResolveViewModelType">
            <summary>
            Default: Gets or sets the view model type resolver that can resolve the view model type given the view type.
            </summary>
            <value>
            The view model type resolver.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.ResolveViewType">
            <summary>
            Gets or sets the view type resolver that can resolve the view type given the view model type.
            </summary>
            <value>
            The view type resolver.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultResolveViewType">
            <summary>
            Default: Gets or sets the view type resolver that can resolve the view type given the view model type.
            </summary>
            <value>
            The view type resolver.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.FindHostingWindowOf">
            <summary>
            Gets or sets the window finder.
            </summary>
            <value>
            The window finder.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultFindHostingWindowOf">
            <summary>
            Default: Gets or sets the window finder.
            </summary>
            <value>
            The window finder.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.FindWindowOf">
            <summary>
            Gets or sets the View -&gt; window finder, that given a View finds the root hosting Window for the given View.
            </summary>
            <value>
            The find window of.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultFindWindowOf">
            <summary>
            Default: Gets or sets the View -&gt; window finder, that given a View finds the root hosting Window for the given View.
            </summary>
            <value>
            The find window of.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.ViewHasDataContext">
            <summary>
            Gets or sets the logic that determines if view has data context.
            </summary>
            <value>
            The logic that determines if view has data context.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultViewHasDataContext">
            <summary>
            Default: Gets or sets the logic that determines if view has data context.
            </summary>
            <value>
            The logic that determines if view has data context.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.SetViewDataContext">
            <summary>
            Gets or sets the logic that sets the view data context.
            </summary>
            <value>
            The logic that sets the view data context.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultSetViewDataContext">
            <summary>
            Default: Gets or sets the logic that sets the view data context.
            </summary>
            <value>
            The logic that sets the view data context.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.GetViewDataContext">
            <summary>
            Gets or sets the logic that gets view data context.
            </summary>
            <value>
            The logic that gets view data context.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultGetViewDataContext">
            <summary>
            Default: Gets or sets the logic that gets view data context.
            </summary>
            <value>
            The logic that gets view data context.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.TryHookClosedEventOfHostOf">
            <summary>
            Tries to hook closed event of an the element in the visual tree that hosts this given view.
            If the hook succedeed the given callback will be called once the hosting element is closed.
            </summary>
            <returns>
            The element, that supports closed notifications, in the visual tree that hosts the given view; otherwise <c>null</c>.
              </returns>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultTryHookClosedEventOfHostOf">
            <summary>
            Default: Tries to hook closed event of an the element in the visual tree that hosts this given view.
            If the hook succedeed the given callback will be called once the hosting element is closed.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.IsHostingView">
            <summary>
            Gets or sets the convention that determines if the given FrameworkElement is a hosting view.
            </summary>
            <value>
            The convention that determines if the given FrameworkElement is a hosting view.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultIsHostingView">
            <summary>
            Default: Gets or sets the convention that determines if the given FrameworkElement is a hosting view.
            </summary>
            <value>
            The convention that determines if the given FrameworkElement is a hosting view.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.AttachViewToViewModel">
            <summary>
            Gets or sets the attach view to view model handler.
            </summary>
            <value>
            The attach view to view model handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultAttachViewToViewModel">
            <summary>
            Default: Gets or sets the attach view to view model handler.
            </summary>
            <value>
            The attach view to view model handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.GetViewOfViewModel">
            <summary>
            Gets the view of the given view model.
            </summary>
            <value>
            The get view of view model handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultGetViewOfViewModel">
            <summary>
            Default: Gets the view of the given view model.
            </summary>
            <value>
            The get view of view model handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.AttachViewBehaviors">
            <summary>
            Gets an opportunity toattach behaviors to the view.
            </summary>
            <value>
            The attach view behaviors handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultAttachViewBehaviors">
            <summary>
            Default: Gets an opportunity to attach behaviors to the view.
            </summary>
            <value>
            The attach view behaviors handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DetachViewBehaviors">
            <summary>
            Gets an opportunity to detach behaviors from the view.
            </summary>
            <value>
            The detach view behaviors handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultDetachViewBehaviors">
            <summary>
            Default: Gets an opportunity to detach behaviors from the view.
            </summary>
            <value>
            The detach view behaviors handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.ShouldNotifyViewModelLoaded">
            <summary>
            Gets or sets the logic that determines if ViewModel should notify the loaded message.
            </summary>
            <value>
            The logic that determines if ViewModel should notify the loaded message.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultShouldNotifyViewModelLoaded">
            <summary>
            Default: Gets or sets the logic that determines if ViewModel should notify the loaded message.
            </summary>
            <value>
            The logic that determines if ViewModel should notify the loaded message.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.ShouldNotifyViewLoaded">
            <summary>
            Gets or sets the logic that determines if View should notify the loaded message.
            </summary>
            <value>
            The logic that determines if View should notify the loaded message.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultShouldNotifyViewLoaded">
            <summary>
            Default: Gets or sets the logic that determines if View should notify the loaded message.
            </summary>
            <value>
            The logic that determines if View should notify the loaded message.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.ViewReleaseHandler">
            <summary>
            Gets or sets the view relase handler that is responsible to release views and view models.
            </summary>
            <value>
            The view release handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultViewReleaseHandler">
            <summary>
            Default: Gets or sets the view release handler that is responsible to release views and view models.
            </summary>
            <value>
            The view release handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.ShouldUnregisterRegionManagerOfView">
            <summary>
            Gets or sets the handler that determines if a region manager for the given view should be un-registered, the default behavior is that the region manager should be realsed if the view is not a singleton view.
            </summary>
            <value>
            The un-register region manager handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultShouldUnregisterRegionManagerOfView">
            <summary>
            Default: Gets or sets the handler that determines if a region manager for the given view should be un-registered, the default behavior is that the region manager should be realsed if the view is not a singleton view.
            </summary>
            <value>
            The un-register region manager handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.ShouldReleaseView">
            <summary>
            Gets or sets the handler that determines if a view should be relased, the default behavior is that the view is released if not a singleton view.
            </summary>
            <value>
            The view release handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultShouldReleaseView">
            <summary>
            Default: Gets or sets the handler that determines if a view should be relased, the default behavior is that the view is released if not a singleton view.
            </summary>
            <value>
            The view release handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.ShouldUnsubscribeViewModelOnRelease">
            <summary>
            Gets or sets the handler that determines if a view model should be automatically unsubscribed from all the subscriptions when its view is relased, the default behavior is that the view model is unsubscribed if the view is not a singleton view.
            </summary>
            <value>
            The unsubscribe handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultShouldUnsubscribeViewModelOnRelease">
            <summary>
            Default: Gets or sets the handler that determines if a view model should be automatically unsubscribed from all the subscriptions when its view is relased, the default behavior is that the view model is unsubscribed if the view is not a singleton view.
            </summary>
            <value>
            The unsubscribe handler.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.ConventionsHanlder.DefaultViewDataContextSearchBehavior">
            <summary>
            Gets or sets the default view data context search behavior.
            </summary>
            <value>
            The default view data context search behavior.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Services.Validation.DataAnnotationValidationService">
            <summary>
            DataAnnotationValidationService factory.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.DataAnnotationValidationService.CreateFor``1(``0)">
            <summary>
            Creates a new DataAnnotationValidationService instance for the given entity..
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Services.Validation.DataAnnotationValidationService`1">
            <summary>
            Validation service specialized to validates entities 
            decorated with the DataAnnotation attributes.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.DataAnnotationValidationService`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Services.Validation.DataAnnotationValidationService`1"/> class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.DataAnnotationValidationService`1.OnValidate(System.String)">
            <summary>
            Called in order to execute the concrete validation process.
            </summary>
            <param name="ruleSet">The rule set.</param>
            <returns>
            A list of <seealso cref="T:Topics.Radical.Validation.ValidationError"/>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.DataAnnotationValidationService`1.OnValidateProperty(System.String,System.String)">
            <summary>
            Called in order to execute the concrete validation process on the given property.
            </summary>
            <param name="ruleSet">The rule set.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
            A list of <seealso cref="T:Topics.Radical.Validation.ValidationError"/>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.DataAnnotationValidationService`1.GetPropertyDisplayName(System.Object,System.String)">
            <summary>
            Gets the display name of the property.
            </summary>
            <param name="entity">The entity.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.DataAnnotationValidationService`1.AddRule(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Func{Topics.Radical.Validation.ValidationContext{`0},System.String},System.Func{Topics.Radical.Validation.ValidationContext{`0},System.Boolean})">
            <summary>
            Adds a custom validation rule.
            </summary>
            <param name="property">The property.</param>
            <param name="error">The error.</param>
            <param name="rule">The rule.</param>
            <returns></returns>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.Services.Validation.DataAnnotationValidationService`1.PropertyValueGetter">
            <summary>
            Gets or sets the property value getter that is responsible to
            retrieve the value of the property that will be validated.
            </summary>
            <value>
            The property value getter.
            </value>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Services.Validation.EntityValidationService`1">
            <summary>
            Defines a validation service specialized in entity validation.
            </summary>
            <typeparam name="T">The type of the entity to validate.</typeparam>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.EntityValidationService`1.#ctor(`0,Topics.Radical.ComponentModel.Validation.IValidator{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Services.Validation.EntityValidationService`1"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="validators">The validators.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.EntityValidationService`1.OnValidate(System.String)">
            <summary>
            Called in order to execute the concrete validation process.
            </summary>
            <param name="ruleSet">The rule set.</param>
            <returns>
            A list of <seealso cref="T:Topics.Radical.Validation.ValidationError"/>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.EntityValidationService`1.OnValidateProperty(System.String,System.String)">
            <summary>
            Called in order to execute the concrete validation process on the given property.
            </summary>
            <param name="ruleSet">The rule set.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
            A list of <seealso cref="T:Topics.Radical.Validation.ValidationError"/>.
            </returns>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Services.Validation.NullValidationService">
            <summary>
            A default fake implementation of the <see cref="T:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService"/> interface.
            </summary>
        </member>
        <member name="F:Topics.Radical.Windows.Presentation.Services.Validation.NullValidationService.Instance">
            <summary>
            A default empty instance of a validation service.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.NullValidationService.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Topics.Radical.Windows.Presentation.Services.Validation.NullValidationService"/> class from being created.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.NullValidationService.OnValidate(System.String)">
            <summary>
            Called in order to execute the concrete validation process.
            </summary>
            <param name="ruleSet">The rule set.</param>
            <returns>
            A list of <seealso cref="T:Topics.Radical.Validation.ValidationError"/>.
            </returns>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Services.Validation.DelegateValidationService">
            <summary>
            A validation service that delegates the validation process to a user defined handler.
            </summary>
            <remarks>
            This validation service implementation is the ideal bridge to link the Radical.Presentation
            validation process with an external validation system, e.g. the one supplied by the Validation 
            Application Block of the Enterprise Library.
            </remarks>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.DelegateValidationService.#ctor(System.Func{System.String,System.Collections.Generic.IEnumerable{Topics.Radical.Validation.ValidationError}})">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Services.Validation.DelegateValidationService"/> class.
            </summary>
            <param name="validationCallback">The validation callback.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.Validation.DelegateValidationService.OnValidate(System.String)">
            <summary>
            Called in order to execute the concrete validation process.
            </summary>
            <param name="ruleSet">The rule set.</param>
            <returns>
            A list of <seealso cref="T:Topics.Radical.Validation.ValidationError"/>.
            </returns>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.AbstractViewModel">
            <summary>
            A base abstract ViewModel with builtin support for validation, error notification.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractViewModel.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractViewModel.SkipPropertyValidation(System.String)">
            <summary>
            Determines if property validation should be skipped for the given property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractViewModel.GetValidationService">
            <summary>
            Gets the validation service, this method is called once the first time
            the validation service is accessed, inheritors should override this method
            in order to provide a <see cref="T:Topics.Radical.Windows.Presentation.ComponentModel.IValidationService"/> implementation.
            </summary>
            <returns>The validation service to use to validate this view model.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.AbstractViewModel"/> class.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractViewModel.System#ComponentModel#ISupportInitialize#BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractViewModel.System#ComponentModel#ISupportInitialize#EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractViewModel.ValidateProperty(System.String)">
            <summary>
            Validates the given property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>
            The first validation error, if any; Otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractViewModel.ValidateProperty(System.String,Topics.Radical.Windows.Presentation.ComponentModel.ValidationBehavior)">
            <summary>
            Validates the given property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="behavior">The behavior.</param>
            <returns>
            The first validation error, if any; Otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractViewModel.Validate">
            <summary>
            Validates this instance.
            </summary>
            <returns><c>True</c> if this instance is valid; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractViewModel.Validate(Topics.Radical.Windows.Presentation.ComponentModel.ValidationBehavior)">
            <summary>
            Validates this instance.
            </summary>
            <param name="behavior">The behavior.</param>
            <returns>
              <c>True</c> if this instance is valid; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractViewModel.Validate(System.String,Topics.Radical.Windows.Presentation.ComponentModel.ValidationBehavior)">
            <summary>
            Validates this instance.
            </summary>
            <param name="ruleSet">The rule set.</param>
            <param name="behavior">The behavior.</param>
            <returns>
              <c>True</c> if this instance is valid; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractViewModel.OnValidated">
            <summary>
            Raises the Validated event.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractViewModel.TriggerValidation">
            <summary>
            Triggers the validation.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractViewModel.MoveFocusTo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Moves the focus to.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.AbstractViewModel.MoveFocusTo(System.String)">
            <summary>
            Moves the focus to.
            </summary>
            <param name="focusedElementKey">The focused element key.</param>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractViewModel.Topics#Radical#Windows#Presentation#ComponentModel#IViewModel#View">
            <summary>
            Gets or sets the view. The view property is intended only for
            infrastructural purpose. It is required to hold the one-to-one
            relation beteewn the view and the view model.
            </summary>
            <value>
            The view.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractViewModel.IsValidationEnabled">
            <summary>
            Gets a value indication if validation is enabled or not.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractViewModel.ValidationService">
            <summary>
            Gets the validation service.
            </summary>
            <value>The validation service.</value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractViewModel.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
            <remarks>Used only in order to satisfy IDataErrorInfo interface implementation, the default implementation always returns null.</remarks>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractViewModel.Item(System.String)">
            <summary>
            Gets the error message, if any, for the property with the given name.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractViewModel.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractViewModel.ValidationErrors">
            <summary>
            Gets the validation errors if any.
            </summary>
            <value>The validation errors.</value>
        </member>
        <member name="E:Topics.Radical.Windows.Presentation.AbstractViewModel.Validated">
            <summary>
            Occurs when the validation process terminates.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractViewModel.IsTriggeringValidation">
            <summary>
            Gets or sets a value indicating whether this instance is triggering validation.
            </summary>
            <value>
            	<c>true</c> if this instance is triggering validation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractViewModel.FocusedElementKey">
            <summary>
            Gets or sets the focused element key.
            </summary>
            <value>
            The focused element key.
            </value>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractViewModel.RunValidationOnPropertyChanged">
            <summary>
            Determines if each time a property changes the validation process should be run. The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:Topics.Radical.Windows.Presentation.AbstractViewModel.IsResettingValidation">
            <summary>
            <c>True</c> if the current ValidationService is resetting the validation status; Otherwise <c>false</c>.
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Services.ViewResolver">
            <summary>
            Resolves view automatically attaching view models by convention.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.ViewResolver.#ctor(System.IServiceProvider,Topics.Radical.Windows.Presentation.ComponentModel.IConventionsHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Topics.Radical.Windows.Presentation.Services.ViewResolver"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="conventions">The conventions.</param>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.ViewResolver.GetView(System.Type)">
            <summary>
            Gets the view of the given type.
            </summary>
            <param name="viewType"></param>
            <returns>
            The view instance.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.ViewResolver.GetView``1">
            <summary>
            Gets the view.
            </summary>
            <typeparam name="T">The type of the view.</typeparam>
            <returns>
            The view instance.
            </returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.ViewResolver.GetView``1(System.Action{System.Object})">
            <summary>
            Gets the view.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="viewModelInterceptor">The view model interceptor.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.ViewResolver.GetView``2(System.Action{``1})">
            <summary>
            Gets the view.
            </summary>
            <typeparam name="TView">The type of the view.</typeparam>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <param name="viewModelInterceptor">The view model interceptor.</param>
            <returns></returns>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Services.ViewResolver.GetView(System.Type,System.Action{System.Object})">
            <summary>
            Gets the view.
            </summary>
            <param name="viewType">Type of the view.</param>
            <param name="viewModelInterceptor">The view model interceptor.</param>
            <returns></returns>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.SplashScreenView">
            <summary>
            Interaction logic for SplashScreenView.xaml
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.SplashScreenView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Wait">
            <summary>
            Allows to execute and action after a user defined amount of time.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Wait.For(System.TimeSpan)">
            <summary>
            Waits for the specified delay.
            </summary>
            <param name="delay">The delay.</param>
            <returns>A waiter ready to be configured.</returns>
        </member>
        <member name="T:Topics.Radical.Windows.Presentation.Wait.Waiter">
            <summary>
            A waiter for the Wait infrastucture.
            </summary>
        </member>
        <member name="M:Topics.Radical.Windows.Presentation.Wait.Waiter.AndThen(System.Action)">
            <summary>
            After the delay executes the given action.
            </summary>
            <param name="action">The action.</param>
        </member>
    </members>
</doc>
